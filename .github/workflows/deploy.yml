name: AI Jarvis Design Deployment

on:
  workflow_dispatch:

env:
  EC2_SERVER_DIR: /home/${{ secrets.EC2_USER }}/server
  EC2_CERTBOT_DIR: /home/${{ secrets.EC2_USER }}/server/certbot/www
  EC2_SSH_ADDRESS: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}

  DOCKER_GPG_URL: https://download.docker.com/linux/ubuntu/gpg
  DOCKER_GPG_PATH: /etc/apt/keyrings/docker.gpg
  DOCKER_REPO_URL: https://download.docker.com/linux/ubuntu
  DOCKER_REPO_LIST: /etc/apt/sources.list.d/docker.list

jobs:
  production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Environment Variable for EC2
        uses: ./.github/actions/config-env
        with:
          hugging_face_api_token: ${{ secrets.HUGGING_FACE_API_TOKEN }}

      - name: Make Server and Certbot Certificates Directory on EC2
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ${{ env.EC2_SERVER_DIR }}
            mkdir -p ${{ env.EC2_CERTBOT_DIR }}

      - name: Install Docker and Docker Compose inside EC2
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            if ! command -v docker &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings

              # Download and save Docker GPG key
              curl -fsSL "${{ env.DOCKER_GPG_URL }}" | sudo gpg --dearmor -o "${{ env.DOCKER_GPG_PATH }}"

              # Set correct permissions for the GPG key
              sudo chmod a+r "${{ env.DOCKER_GPG_PATH }}"

              # Add Docker official repository
              echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=${{ env.DOCKER_GPG_PATH }}] \
                  ${{ env.DOCKER_REPO_URL }} \
                  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                  sudo tee "${{ env.DOCKER_REPO_LIST }}" > /dev/null

              sudo apt-get update
             
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin 
                
              sudo usermod -aG docker $USER
            fi

            if ! docker compose version &> /dev/null; then
              sudo apt-get install -y docker-compose-plugin
            fi

      - name: Upload config files to EC2
        uses: ./.github/actions/upload-config-files-ec2
        with:
          ec2_secret_key: ${{ secrets.EC2_SSH_KEY }}
          ec2_ssh_address: ${{ env.EC2_SSH_ADDRESS }}
          ec2_server_directory: ${{ env.EC2_SERVER_DIR }}
          files_to_upload: "docker-compose.yml default.ssl.conf default.nossl.conf .env"

      - name: Start nginx (non-SSL) before Certbot
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.EC2_SERVER_DIR }}

            touch default.conf
            cp default.nossl.conf default.conf

            echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            docker compose pull
            docker compose up -d

            docker ps
            docker logs nginx

      - name: Install and Setup Certbot SSL Certificates (webroot)
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            if ! command -v certbot &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y certbot
            fi

            # Issue/Renew certificate using webroot
            sudo certbot certonly --webroot \
              --webroot-path ${{ env.EC2_CERTBOT_DIR }} \
              --non-interactive \
              --agree-tos \
              -m torremocha.johnkristan@gmail.com \
              -d ai.jarvis-designs.it.com

              
      - name: Restart nginx with SSL config
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.EC2_SERVER_DIR }}

            cp default.ssl.conf default.conf
            docker compose restart nginx

      - name: Ensure Certbot Auto-Renewal
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo systemctl enable --now certbot.timer

      - name: üöÄ Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }} 
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            cd ${{ env.EC2_SERVER_DIR }}

            echo "üìÑ Checking Files inside EC2"
            ls -lah

            echo "üìÑ Viewing .env"
            cat .env

            echo "üîê Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "Stopping old containers..."
            docker compose down || true

            echo "Pulling latest images..."
            docker compose pull

            echo "Starting containers..."
            docker compose up -d --remove-orphans

            echo "Checking container status..."
            docker compose ps

            echo "Recent logs:"
            docker compose logs --tail=50
